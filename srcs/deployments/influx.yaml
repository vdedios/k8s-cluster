apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: "2020-08-23T10:43:02Z"
  generation: 1
  labels:
    app: influx
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:app: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:app: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:app: {}
          f:spec:
            f:containers:
              k:{"name":"myinflux"}:
                .: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
    manager: kubectl
    operation: Update
    time: "2020-08-23T10:43:02Z"
  name: influx
  namespace: default
  resourceVersion: "41663"
  selfLink: /apis/apps/v1/namespaces/default/deployments/influx
  uid: 1e35ba32-bcff-4ad6-a732-74544029d7ee
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: influx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: influx
    spec:
      containers:
      - image: myinflux
        imagePullPolicy: Never
        name: myinflux
        volumeMounts:
        - name: influx-persistent-storage
          mountPath: /var/lib/influxdb
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: influx-persistent-storage
        persistentVolumeClaim:
          claimName: influx-pv-claim
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2020-08-23T10:47:46Z"
  labels:
    app: influx
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:app: {}
      f:spec:
        f:ports:
          .: {}
          k:{"port":8086,"protocol":"TCP"}:
            .: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
        f:selector:
          .: {}
          f:app: {}
        f:sessionAffinity: {}
        f:type: {}
    manager: kubectl
    operation: Update
    time: "2020-08-23T10:47:46Z"
  name: influx
  namespace: default
  resourceVersion: "41965"
  selfLink: /api/v1/namespaces/default/services/influx
  uid: 617f68c6-0571-49b3-87dd-d402ae1f3b6b
spec:
  clusterIP: 10.97.25.163
  ports:
  - port: 8086
    protocol: TCP
    targetPort: 8086
  selector:
    app: influx
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: influx-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/influx"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influx-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
